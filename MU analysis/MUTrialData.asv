function MUTrialData(physpath,sortpath,animal,unit,exp,probeID,eventType,eId,baseTime,stimTime)
%compute MUA (Nikos method) for every trial

%input:
%physpath: path to amplifier file
%sortpath: path to id and trialinfo files
%animal: animal id
%unit: unit id (string)
%exp: exp id (string)
%probeId: probe id (number)
%eventType: id - decimal number for event; ch - 'on' for 1 selected channel
%eId: either decimal number for trigger event, or channel number
%baseTime: time before event to include (in s)
%stimTime: time after event to include (in s)

physname=fullfile(physpath,animal,[animal '_u' unit '_' exp],[animal '_u' unit '_' exp]);
idname=fullfile(sortpath,animal,[animal '_u' unit '_' exp],[animal '_u' unit '_' exp]);

%load id file (for recording and probe info)
load([idname '_id.mat']); %generates id
nrChTotal=sum([id.probes.nChannels]);

%load trialinfo file (for trial information)
load([idname '_trialInfo.mat']); %generates trialInfo

%make filter - 500Hz to 3kHz
[butter_b,butter_a] = butter(3,[500 3000]/(id.sampleFreq/2),'bandpass');

%translate time windows into samples
baseSample=round(baseTime*id.sampleFreq);
stimSample=round(stimTime*id.sampleFreq);
nSamples=baseSample+stimSample;

%find events
if strcmp(eventType,'id')
    eventIdx=find(trialInfo.eventId==eId);
else
    eventIdx=find(trialInfo.eventCh(:,eId)==1);
end


%open amplifier file
dataFileId = fopen([physname '_amplifier.dat'],'r');


for i=1:length(eventIdx)
    eTime=trialInfo.eventTimes(eventIdx(i)); %in samples
    startSample=eTime-baseSample;
    
    %read all data
    frewind(dataFileId);
    fseek(dataFileId,2*startSample*nrChTotal,'bof');
    Data = fread(dataFileId, [nrChTotal nSamples], 'int16');
   
    %only keep the correct probe and reshape
    if length(id.probes)>1
        startidx=sum([id.probes(1:probeID-1).nChannels])+1; %0 for probe 1
        stopidx=startidx+id.probes(probeID).nChannels-1;
        Data=Data(startidx:stopidx,:);
    end
    
    %transpose for speed - dimension 1 is samples, dimension 2 channels
    Data=Data';
    
    %filter
    Data = filter(butter_b, butter_a, Data,[],1);
    
    %rectify
    Data=abs(Data);

    %decimate to 1kHz - need to do this for every channel separately
    for c=1:id.probes(probeID).nChannels
        decData(:,c)=decimate(Data(:,c),id.sampleFreq/1000);
    end
    
    
    %also compute Z transform
    
    %collect
    MUA(:,:,i)=decData;
    
    for j=1:nCh
     
          
        %z transform 
        baseL=beforeS/30;
        meanBase=mean(decData(baseL/2:baseL)); %avoid initial part b/c of artefact
        stdBase=std(decData(baseL/2:baseL));
        decDataZ=(decData-meanBase)/stdBase;
        
        
        avgOut(j,:)=avgOut(j,:)+decData;
        avgOutZ(j,:)=avgOutZ(j,:)+decDataZ;
    end

end


%document settings
MUinfo.eventType=eventType;
MUinfo.eventId=eId;
MUinfo.baseTime=baseTime;
MUinfo.stimTime=stimTime;

%copy trial info
MUinfo.dom=trialInfo.dom;
MUinfo.domval=trialInfo.domval;
MUinfo.blankId=trialInfo.blankId;
MUinfo.triallist=trialInfo.triallist;

%copy position info
MUinfo.xpos=id.probes(probeID).x;
MUinfo.zpos=id.probes(probeID).z;
MUinfo.shaft=id.probes(probeID).shaft;
MUinfo.zshaft=id.probes(probeID).z+100*

        
        comZEnShaft=comZEn+(maxZ+100)*(id.probes(probeID).shaft(i)-1); %buffer of 100um between shafts
        comZMinShaft=comZMin+(maxZ+100)*(id.probes(probeID).shaft(i)-1);
